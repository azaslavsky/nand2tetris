// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Finalize x.
    Not16(in[0]=zx,in[1]=zx,in[2]=zx,in[3]=zx,in[4]=zx,in[5]=zx,in[6]=zx,in[7]=zx,in[8]=zx,in[9]=zx,in[10]=zx,in[11]=zx,in[12]=zx,in[13]=zx,in[14]=zx,in[15]=zx,out=notzx);
    And16(a=x,b=notzx,out=xapplyz);
    Not16(in=xapplyz,out=xapplyn);
    Mux16(a=xapplyz,b=xapplyn,sel=nx,out=xfin);

    // Finalize y.
    Not16(in[0]=zy,in[1]=zy,in[2]=zy,in[3]=zy,in[4]=zy,in[5]=zy,in[6]=zy,in[7]=zy,in[8]=zy,in[9]=zy,in[10]=zy,in[11]=zy,in[12]=zy,in[13]=zy,in[14]=zy,in[15]=zy,out=notzy);
    And16(a=y,b=notzy,out=yapplyz);
    Not16(in=yapplyz,out=yapplyn);
    Mux16(a=yapplyz,b=yapplyn,sel=ny,out=yfin);

    // Compute function result.
    And16(a=xfin,b=yfin,out=xandy);
    Add16(a=xfin,b=yfin,out=xplusy);
    Mux16(a=xandy,b=xplusy,sel=f,out=fout);

    // Invert result if necessary.
    Not16(in=fout,out=fnot);
    Mux16(a=fout,b=fnot,sel=no,out=out,out[0..7]=left,out[8..15]=right,out[15]=signbit);

    // Extra "is_negative" and "is_zero" output bits.
    And(a=signbit,b=true,out=ng);
    Or8Way(in=left,out=or1);
    Or8Way(in=right,out=or2);
    Or(a=or1,b=or2,out=notzr);
    Not(in=notzr,out=zr);
}